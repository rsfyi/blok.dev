{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "brutalist-buttons",
  "type": "registry:component",
  "title": "Brutalist Buttons",
  "description": "A collection of customizable brutalist-style buttons with multiple variants including default, secondary, destructive, outline, ring, gradient, and link styles. Features include shadow effects, hover animations, icon support, and loading states.",
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/brutalist/buttons/button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { Loader2 } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst brutalistButtonVariants = cva(\n  \"relative inline-flex items-center justify-center font-mono uppercase tracking-wider transition-all border-2 border-black rounded-none\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground border-primary\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary hover:text-accent-foreground border-accent\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive border-destructive\",\n        ghost:\n          \"bg-transparent text-primary hover:bg-accent hover:text-accent-foreground border-accent\",\n        outline:\n          \"bg-white text-primary hover:bg-accent hover:text-accent-foreground border-primary\",\n        ring: \"bg-white text-primary border-primary hover:ring-2 hover:ring-ring hover:ring-offset-2\",\n        gradient: \"border-primary text-primary-foreground bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600\",\n        link: \"bg-transparent hover:bg-transparent text-primary hover:text-primary hover:underline hover:underline-offset-4 border-none shadow-none p-0 inline-flex items-center\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-8 px-3 text-xs\",\n        lg: \"h-12 px-8\",\n        icon: \"h-10 w-10 p-0 flex items-center justify-center\",\n      },\n      withShadow: {\n        true: \"\",\n        false: \"\",\n      },\n      loading: {\n        true: \"\",\n        false: \"\",\n      },\n      withIcon: {\n        left: \"\",\n        right: \"\",\n        none: \"\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n      withShadow: true,\n      loading: false,\n      withIcon: \"none\",\n    },\n    compoundVariants: [\n      {\n        withShadow: false,\n        className: \"\",\n      },\n      {\n        variant: \"link\",\n        className: \"shadow-none\",\n      },\n    ],\n  }\n);\n\nexport interface BrutalistButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof brutalistButtonVariants> {\n  asChild?: boolean;\n  icon?: React.ReactNode;\n  isLoading?: boolean;\n}\n\nconst BrutalistButton = React.forwardRef<\n  HTMLButtonElement,\n  BrutalistButtonProps\n>(\n  (\n    {\n      className,\n      variant,\n      size,\n      withShadow = true,\n      loading = false,\n      withIcon = \"none\",\n      asChild = false,\n      icon,\n      isLoading = false,\n      children,\n      disabled,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    // Create the button content\n    const buttonContent = (\n      <>\n        {isLoading && (\n          <span className=\"absolute inset-0 flex items-center justify-center\">\n            <Loader2 className=\"animate-spin h-5 w-5\" />\n          </span>\n        )}\n        <span\n          className={cn(\"flex items-center gap-2\", isLoading && \"invisible\")}\n        >\n          {withIcon === \"left\" && icon}\n          {children}\n          {withIcon === \"right\" && icon}\n        </span>\n      </>\n    );\n\n    // If withShadow is true, wrap the button in a container with shadow\n    if (withShadow) {\n      return (\n        <div className=\"relative inline-block group\">\n          <div\n            className={cn(\n              \"absolute top-1 left-1 w-full h-full bg-black transition-all group-hover:top-0 group-hover:left-0\",\n              size === \"sm\" &&\n                \"top-[3px] left-[3px] group-hover:top-0 group-hover:left-0\",\n              size === \"lg\" &&\n                \"top-[5px] left-[5px] group-hover:top-0 group-hover:left-0\"\n            )}\n          ></div>\n          <Comp\n            className={cn(\n              brutalistButtonVariants({\n                variant,\n                size,\n                withShadow,\n                loading,\n                withIcon,\n                className,\n              })\n            )}\n            ref={ref}\n            disabled={disabled || isLoading}\n            {...props}\n          >\n            {buttonContent}\n          </Comp>\n        </div>\n      );\n    }\n\n    // Otherwise, just return the button\n    return (\n      <Comp\n        className={cn(\n          brutalistButtonVariants({\n            variant,\n            size,\n            withShadow,\n            loading,\n            withIcon,\n            className,\n          })\n        )}\n        ref={ref}\n        disabled={disabled || isLoading}\n        {...props}\n      >\n        {buttonContent}\n      </Comp>\n    );\n  }\n);\n\nBrutalistButton.displayName = \"BrutalistButton\";\n\nexport { BrutalistButton, brutalistButtonVariants };\n",
      "type": "registry:component"
    }
  ]
}